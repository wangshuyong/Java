package com.edu.cms.BaseLib;

import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.*;
   
public class ExcelUtils {
   private XSSFSheet ExcelWSheet;
   private XSSFWorkbook ExcelWBook;
   private int      rowNum       = 0;
   private int      currentRowNo = 0;
   private int columns=0;
   public ArrayList<String> arrkey = new ArrayList<String>();

   public ExcelUtils() {
	
   }
   
   @SuppressWarnings({ "null", "resource" })
public Collection<Object> ReadExcelFile(String filePath, String sSheetName) {  
       XSSFRow row = null; 
       XSSFCell cell = null;
       XSSFSheet sheet = null;
       XSSFWorkbook wb;
       List<Object> rows = new ArrayList<Object>();
       List<Object> rowData = new ArrayList<Object>();
	   try {  
           FileInputStream fis = new FileInputStream(filePath);  
           wb = new XSSFWorkbook(fis);  
           sheet = wb.getSheet(sSheetName);  

       } catch (Exception e) {  
           e.printStackTrace();  
       }
//	return cellNovalue;
	   
	   for (int i = 0; i < sheet.getPhysicalNumberOfRows(); i++) { 
		   int numberOfColumns = countNonEmptyColumns(sheet);
		   row = sheet.getRow(i); 
            rowData.clear();      
            for (int column = 0; column < numberOfColumns; column++) {
             cell = row.getCell(column);
             rowData.add(this.getCellValue(cell));
            }         
            rows.add(rowData.toArray()); 
          }       
       return rows;
	   
   }
   public Object[][] getExcelData(String filePath, String sSheetName) throws IOException {

	   try {  
           FileInputStream fis = new FileInputStream(filePath);  
           ExcelWBook = new XSSFWorkbook(fis);  
           ExcelWSheet = ExcelWBook.getSheet(sSheetName);  

       } catch (Exception e) {  
           e.printStackTrace();  
       }
	   
	   rowNum = ExcelWSheet.getPhysicalNumberOfRows();
       columns = countNonEmptyColumns(ExcelWSheet);
       // 为了返回值是Object[][],定义一个多行单列的二维数组
       HashMap<String, String>[][] arrmap = new HashMap[rowNum - 1][1];
       // 对数组中所有元素hashmap进行初始化
       if (rowNum > 1) {
           for (int i = 0; i < rowNum - 1; i++) {
               arrmap[i][0] = new HashMap<String, String>();
           }
       } else {
           System.out.println("excel中没有数据");
       }

       // 获得首行的列名，作为hashmap的key值
       for (int c = 0; c < columns; c++) {
           String cellvalue = ((Object) ExcelWSheet.getCellComment(c, 0)).getContents();
           arrkey.add(cellvalue);
       }
       // 遍历所有的单元格的值添加到hashmap中
       for (int r = 1; r < rowNum; r++) {
           for (int c = 0; c < columns; c++) {
               String cellvalue = ExcelWSheet.getCellComment(c, r).getContents();
               arrmap[r - 1][0].put(arrkey.get(c), cellvalue);
           }
       }
       return arrmap;
   }
   
   public String[][] getexcel(String Filepath){
	   FileInputStream is=new FileInputStream(Filepath);
	   XSSFWorkbook  workbook=new XSSFWorkbook(is);
	   XSSFSheet sheet=workbook.getSheet("Sheet1");
	   String[][] records=null;
	   int count=sheet.getLastRowNum();
	   records=new String[count+1][]
	   for(Integer i=0;i<=count;i++){
	      Row row=sheet.getrow(i);
	      Integer cellcount=row.getLastCellNum();
	      records[i]=new String[cellcount];
	      for(Integer j=0;j<cellcount;i++){
	      records[i][j]=sheet.getrow(i).getsheet(j).getStringCellValue();}

	    }
	   return records;

	}
   
   public boolean hasNext() {
	   
       if (this.rowNum == 0 || this.currentRowNo >= this.rowNum) {

           try {
        	   ExcelWBook.close();
           } catch (Exception e) {
               e.printStackTrace();
           }
           return false;
       } else {
           // sheet涓嬩竴琛屽唴瀹逛负绌哄垽瀹氱粨鏉�
           if ((ExcelWSheet.getRow(currentRowNo)).getCell(0).equals(""))
               return false;
           return true;
       }
   }


   public void remove() {
       throw new UnsupportedOperationException("remove unsupported.");
   }
              
    //This method is to set the rowcount of the excel.
    public int excel_get_rows() throws Exception 
    {
	   try 
	   {
		   return ExcelWSheet.getPhysicalNumberOfRows();           
		} 
		catch (Exception e)
		{
			throw (e);
		
		}
    }
    
    public int excel_get_columns(Iterator it)
    {
    	int columnNum=0;
    	while (it.hasNext()) {
     	  columnNum ++; 
        }
    	return columnNum;
    }
    
    //This method to change the with the CellType.
    private Object getCellValue(XSSFCell cell) {       
        Object cellValue = null;
        DecimalFormat df = new DecimalFormat("#");
        switch (cell.getCellType()) {
            //This case to get the data and get the value as strings.
            case XSSFCell.CELL_TYPE_STRING:           	
                cellValue = cell.getRichStringCellValue().getString().trim();
                break;
            //This case to get the data and get the value as number.
            case XSSFCell.CELL_TYPE_NUMERIC:
                cellValue = df.format(cell.getNumericCellValue()).toString();
                break;
              //This case to get the data and get the value as boolean.
            case XSSFCell.CELL_TYPE_BOOLEAN:
                cellValue = String.valueOf(cell.getBooleanCellValue()).trim();
                break;
            case XSSFCell.CELL_TYPE_FORMULA:
                cellValue = cell.getCellFormula();
                break;
            default:
                cellValue ="空";
        }
        return cellValue;
    }     
    
    private boolean isEmpty(final Row row) {
        Cell firstCell = row.getCell(0);   
        boolean rowIsEmpty = (firstCell == null) || (firstCell.getCellType() == Cell.CELL_TYPE_BLANK);    
        return rowIsEmpty; 
       }
       
       private int countNonEmptyColumns(final Sheet sheet) {   
        Row firstRow = sheet.getRow(0);
        return firstEmptyCellPosition(firstRow);    
       }
       
       private int firstEmptyCellPosition(final Row cells) {  
        int columnCount = 0;
        
        for (Cell cell : cells) {     
         if (cell.getCellType() == Cell.CELL_TYPE_BLANK) {
          break;
         }
         columnCount++;    
        }    
        return columnCount;    
       }
        
       
       

       /**
        * 获得excel文件的路径
        * @return
        * @throws IOException
        */
       public String getPath() throws IOException {
           File directory = new File(".");
           sourceFile = directory.getCanonicalPath() + "\\src\\resources\\"
                   + fileName + ".xls";
           return sourceFile;
       }
}